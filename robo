import pygame
import sys

# Initialize Pygame
pygame.init()

# Constants
WIDTH, HEIGHT = 800, 600
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)

# Create the screen
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Robot Simulation")

# Robot class
class Robot:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.width = 40
        self.height = 60
        self.color = RED
        self.speed = 5

    def draw(self, screen):
        pygame.draw.rect(screen, self.color, (self.x, self.y, self.width, self.height))

    def move(self, dx, dy):
        self.x += dx * self.speed
        self.y += dy * self.speed

# Create a robot instance
robot = Robot(WIDTH // 2, HEIGHT // 2)

# Main loop
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

    # Get the keys pressed
    keys = pygame.key.get_pressed()
    dx, dy = 0, 0

    if keys[pygame.K_LEFT]:
        dx = -1
    if keys[pygame.K_RIGHT]:
        dx = 1
    if keys[pygame.K_UP]:
        dy = -1
    if keys[pygame.K_DOWN]:
        dy = 1

    # Move the robot
    robot.move(dx, dy)

    # Clear the screen
    screen.fill(WHITE)

    # Draw the robot
    robot.draw(screen)

    # Update the display
    pygame.display.flip()

    # Cap the frame rate
    pygame.time.Clock().tick(30)
class HumanoidRobot:
    def __init__(self, name):
        self.name = name
        self.hands = {'left': Hand('left'), 'right': Hand('right')}
        self.legs = {'left': Leg('left'), 'right': Leg('right')}
    
    def __str__(self):
        return f"{self.name}: Hands - {self.hands}, Legs - {self.legs}"

class Hand:
    def __init__(self, side):
        self.side = side
        self.fingers = [Finger(i+1) for i in range(5)]
    
    def __str__(self):
        return f"{self.side} hand with {len(self.fingers)} fingers"

class Finger:
    def __init__(self, number):
        self.number = number
    
    def __str__(self):
        return f"Finger {self.number}"

class Leg:
    def __init__(self, side):
        self.side = side
    
    def __str__(self):
        return f"{self.side} leg"

# Example usage:
robot = HumanoidRobot("Robo")
print(robot)

# Printing details of each hand and its fingers
for side, hand in robot.hands.items():
    print(hand)
    for finger in hand.fingers:
        print(f"  {finger}")

# Printing details of each leg
for side, leg in robot.legs.items():
    print(leg)
